// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//MODELS USER
model User {
  id              String          @id @default(uuid()) @db.Uuid
  email           String          @unique
  name            String
  phone           String
  cpf             String?
  password        String
  permissionLevel PermissionLevel
  role            Role
  recoveryToken         String?
  recoveryTokenExpires  DateTime?

  companyId String @db.Uuid
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PermissionLevel {
  ADMIN
  USER
}

enum Role {
  COMPRADOR
  FORNECEDOR
  AMBOS
}
// END MODELS USER

// MODELS COMPANY
model Company {
  id                  String   @id @default(uuid()) @db.Uuid
  name                String
  companyRegistration String?  @unique
  isInternational     Boolean  @default(false)
  about               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  users        User[]
  opportunities Opportunity[]
  proposals    Proposal[]
  addresses    Address[]
}
// END MODEL COMPANY

// MODEL LOCALIZATION
model Address {
  id           String  @id @default(uuid()) @db.Uuid
  street       String
  number       String
  city         String
  state        String
  zipCode      String
  country      String
  neighborhood String
  isMatriz     Boolean @default(true)

  companyId String  @db.Uuid
  company   Company @relation(fields: [companyId], references: [id])
}
// END MODEL LOCALIZATION


//MODELS OPORTUNITY
model Opportunity {
  id                 String    @id @default(uuid()) @db.Uuid
  codeRFQ            String    @unique
  description        String
  quantity           Int?
  unityMetric        String?
  executionPeriod    DateTime?
  deadlineSubmission DateTime
  typeOpportunity     TypeOpportunity 
  isExpired          Boolean   @default(false)
  companyId          String    @db.Uuid
  subCategoryId      String    @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company          Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subCategory      SubCategory    @relation(fields: [subCategoryId], references: [id])
  

  attachments Attachment[]
  proposals    Proposal[]
}
model Category {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique

  subcategories SubCategory[]
}

model SubCategory {
  id   String @id @default(uuid()) @db.Uuid
  name String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String @db.Uuid

  opportunities Opportunity[]
}

enum TypeOpportunity {
  SERVICO
  MATERIAL
  LOCACAO
}

model Attachment {
  id   String @id @default(uuid()) @db.Uuid
  filePath String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String @db.Uuid
}
// END MODEL OPORTUNITY

model Proposal {
  id        String   @id @default(uuid()) @db.Uuid
  appliedAt DateTime @default(now())
  appliedBy Company  @relation(fields: [companyId], references: [id])
  companyId String @db.Uuid
  updatedAt DateTime @updatedAt

  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String @db.Uuid
}
